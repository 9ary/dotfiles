#!/usr/bin/env python3

import json
import math
import multiprocessing
import os
from pathlib import Path
import subprocess
import sys

music_path = Path("~/music").expanduser()
ogg_path = Path("~/ogg").expanduser()

max_sample_rate = 48000

ffprobe_cmd = "ffprobe -print_format json -show_streams".split()
def transocde(infile):
    outfile_tmp = infile.with_suffix(".opus.tmp")
    outfile_tmp = ogg_path / outfile_tmp.relative_to(music_path)
    outfile = outfile_tmp.with_suffix("")
    if outfile.is_file():
        return
    if outfile_tmp.is_file():
        outfile_tmp.unlink()
    print(outfile.relative_to(ogg_path))
    outfile.parent.mkdir(parents=True, exist_ok=True)

    probe = subprocess.run(
        [*ffprobe_cmd, infile],
        stdout=subprocess.PIPE,
        stderr=subprocess.DEVNULL,
        check=True
    )
    probe = json.loads(probe.stdout.decode())

    encode_args = []
    for stream in probe["streams"]:
        if stream["codec_type"] == "audio":
            index = stream["index"]

            sample_rate = int(stream["sample_rate"])
            if sample_rate > max_sample_rate:
                target_sample_rate = int(
                    sample_rate / math.ceil(sample_rate / max_sample_rate)
                )
                #encode_args += f"-ar:0:{index} {target_sample_rate}".split()

    encode_cmd = [
        *"ffmpeg -y -i".split(),
        infile,
        *"-map 0:a -c:a libopus -b:a 192k -vbr on -f ogg".split(),
        *encode_args,
        outfile_tmp,
    ]

    result = subprocess.run(encode_cmd, capture_output=True)
    try:
        result.check_returncode()
    except subprocess.CalledProcessError:
        print(
            f"Command failed: {encode_cmd}",
            result.stderr.decode(),
            sep="\n"
        )
    else:
        outfile_tmp.rename(outfile)

def main():
    if len(sys.argv) <= 1:
        print("Transcoding entire library")
        search_paths = ["."]
    else:
        search_paths = sys.argv[1:]

    infiles = []
    for p in search_paths:
        for root, dirs, files in os.walk(music_path / p):
            root = Path(root)
            for f in files:
                f = root / f
                if f.suffix.lower() in (".flac", ".ogg"):
                    infiles.append(f)

    with multiprocessing.Pool() as p:
        p.map(transocde, infiles)

main()
