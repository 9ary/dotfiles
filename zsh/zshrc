zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _ignored
zstyle ':completion:*' group-name ''
zstyle ':completion:*' insert-unambiguous true
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
# Fancy matcher:
# - behaves like vim's smartcase
# - matches - and _ agnostically
# - fuzzy matching (priority is given to exact matches)
zstyle ':completion:*' matcher-list \
    'm:{[:lower:]-_}={[:upper:]_-}' \
    'r:[[:graph:]]||[[:graph:]]=** r:|=* m:{[:lower:]-_}={[:upper:]_-}'
zstyle ':completion:*' menu select=1
zstyle ':completion:*' original true
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*:manuals' separate-sections true
zstyle ':completion:*:manuals.*' insert-sections   true
zstyle ':completion:*' verbose true
zstyle ':completion:*' rehash true
autoload -Uz compinit
compinit

HISTFILE=~/.histfile
HISTSIZE=10000
SAVEHIST=10000
setopt appendhistory
setopt histfindnodups
setopt histignoredups
setopt histreduceblanks

REPORTTIME=5
unsetopt beep
unsetopt nomatch

bindkey -e
function terminfo-bindkey() {
    [[ -n "${terminfo[$1]}" ]] && bindkey "${terminfo[$1]}" $2
}
terminfo-bindkey khome beginning-of-line
bindkey '[H' beginning-of-line
terminfo-bindkey kend end-of-line
bindkey '[F' end-of-line
# Insert
terminfo-bindkey kich1 overwrite-mode
# Delete
terminfo-bindkey kdch1 delete-char
# Up
terminfo-bindkey kcuu1 history-substring-search-up
bindkey '[A' history-substring-search-up
# Down
terminfo-bindkey kcud1 history-substring-search-down
bindkey '[B' history-substring-search-down
bindkey  history-substring-search-up
bindkey  history-substring-search-down
# ctrl+enter in foot
bindkey '[27;5;13~' accept-line
unset -f terminfo-bindkey

# Foreground suspended program
# Taken from grml
function grml-zsh-fg () {
    if (( ${#jobstates} )); then
        zle .push-input
        [[ -o hist_ignore_space ]] && BUFFER=' ' || BUFFER=''
        BUFFER="${BUFFER}fg"
        zle .accept-line
    fi
}
zle -N grml-zsh-fg
bindkey  grml-zsh-fg

alias sudo="sudo "
alias ls='ls --color=auto --dereference-command-line-symlink-to-dir -Fh'
alias lsa='ls --color=auto --dereference-command-line-symlink-to-dir -FAh'
alias ll='ls --color=auto --dereference-command-line-symlink-to-dir -Fhl'
alias lla='ls --color=auto --dereference-command-line-symlink-to-dir -FAhl'
alias cp='cp -r'
alias rsync='rsync -rPh --info=PROGRESS2'
alias v='nvim'
alias sv='sudo --preserve-env=HOME nvim'
alias rg='rg -S'
alias pgrep='pgrep -l'
alias verynice='schedtool -B -n 15 -e ionice -c3'

function kpatch() {
    patch=$1
    shift
    git send-email \
        --cc-cmd="./scripts/get_maintainer.pl --norolestats $patch" \
        $@ $patch
}

# Prompt
function pr_fg() {
    echo -n "%{[38;5;${1}m%}"
}
pr_nofg='%{[39m%}'
pr_bg='%{[48;5;18m%}'
pr_nobg='%{[49m%}'
pr_bold='%{[1m%}'
pr_nobold='%{[21m%}'
pr_reset='%{[0m'

if [[ -n "$SSH_CLIENT"  ||  -n "$SSH2_CLIENT" ]]; then
    pr_host="$(pr_fg 13)@$HOST"
else
    pr_host="$(pr_fg 12)@$HOST"
fi

if [[ $UID -eq 0 ]]; then
    pr_user="$(pr_fg 9)$USERNAME"
else
    pr_user="$(pr_fg 10)$USERNAME"
fi

function pr_pwd() {
    echo -n "${pr_nofg}:"
    # Format pwd like so:
    # - $HOME becomes ~
    # - slashes are colored red
    # - the last component of the path is colored green
    pwd | perl -p -e "s|^${HOME}|${pr_nofg}~|;" \
        -e "s|/|$(pr_fg 9)/${pr_nofg}|g;" \
        -e "s|([^/%{}\n]*)\$|$(pr_fg 10)\1${pr_nofg}|"
}

# We enable promptsubst and use single quotes here so that the prompt gets expanded at runtime
setopt promptsubst
PROMPT='${pr_bg}${pr_user}${pr_host}$(pr_pwd)$(gitprompt-rs zsh)%E
${pr_nobg}${pr_bold}$(pr_fg 15)$ ${pr_reset}'

# ls colors
eval $(dircolors ~/dotfiles/zsh/dircolors)
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# Issue a BELL when a command is done
function precmd() {
    echo -ne '\a'
}

which direnv > /dev/null && eval "$(direnv hook zsh)"

source ~/dotfiles/zsh/zsh-autosuggestions/zsh-autosuggestions.zsh

zle -N history-substring-search-up
zle -N history-substring-search-down
source ~/dotfiles/zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)

source ~/dotfiles/zsh/zsh-history-substring-search/zsh-history-substring-search.zsh
HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND='bg=green,fg=black,bold'
HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_NOT_FOUND='bg=red,fg=white,bold'
