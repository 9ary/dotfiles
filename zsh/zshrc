# Autocompletion
zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _ignored
zstyle ':completion:*' group-name ''
zstyle ':completion:*' insert-unambiguous true
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list \
  'm:{[:lower:]-_}={[:upper:]_-}' \
  'r:[[:graph:]]||[[:graph:]]=** r:|=* m:{[:lower:]-_}={[:upper:]_-}'
zstyle ':completion:*' menu select=1
zstyle ':completion:*' original true
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*:manuals' separate-sections true
zstyle ':completion:*:manuals.*' insert-sections   true
zstyle ':completion:*' verbose true
zstyle ':completion:*' rehash true
autoload -Uz compinit
compinit

# History
HISTFILE=~/.histfile
HISTSIZE=10000
SAVEHIST=10000
setopt appendhistory
setopt histexpiredupsfirst
setopt histfindnodups
setopt histignorealldups
setopt histreduceblanks
setopt histsavenodups

# Random options
REPORTTIME=5
unsetopt beep
unsetopt nomatch

# Keyboard stuffs
bindkey -e

# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
typeset -A key

key[Home]=${terminfo[khome]}
key[End]=${terminfo[kend]}
key[Insert]=${terminfo[kich1]}
key[Delete]=${terminfo[kdch1]}
key[Up]=${terminfo[kcuu1]}
key[Down]=${terminfo[kcud1]}
key[Left]=${terminfo[kcub1]}
key[Right]=${terminfo[kcuf1]}
key[PageUp]=${terminfo[kpp]}
key[PageDown]=${terminfo[knp]}

[[ -n "${key[Home]}"     ]]  && bindkey  "${key[Home]}"    beginning-of-line
[[ -n "${key[End]}"      ]]  && bindkey  "${key[End]}"     end-of-line
[[ -n "${key[Insert]}"   ]]  && bindkey  "${key[Insert]}"  overwrite-mode
[[ -n "${key[Delete]}"   ]]  && bindkey  "${key[Delete]}"  delete-char
[[ -n "${key[Up]}"       ]]  && bindkey  "${key[Up]}"      history-substring-search-up
[[ -n "${key[Down]}"     ]]  && bindkey  "${key[Down]}"    history-substring-search-down
bindkey "" history-substring-search-up
bindkey "" history-substring-search-down
[[ -n "${key[Left]}"     ]]  && bindkey  "${key[Left]}"    backward-char
[[ -n "${key[Right]}"    ]]  && bindkey  "${key[Right]}"   forward-char

# Foreground suspended program
# Taken from grml
function grml-zsh-fg () {
  if (( ${#jobstates} )); then
    zle .push-input
    [[ -o hist_ignore_space ]] && BUFFER=' ' || BUFFER=''
    BUFFER="${BUFFER}fg"
    zle .accept-line
  fi
}
zle -N grml-zsh-fg
bindkey "" grml-zsh-fg

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
    function zle-line-init () {
        printf '%s' "${terminfo[smkx]}"
    }
    function zle-line-finish () {
        printf '%s' "${terminfo[rmkx]}"
    }
    zle -N zle-line-init
    zle -N zle-line-finish
fi

# Aliases (duh)
source ~/dotfiles/zsh/aliases

# Prompt
setopt PROMPT_SUBST
pr_fg() { echo -n "%{[38;5;${1}m%}" }
pr_bold="%{[1m%}"
pr_nocolor="%{$terminfo[sgr0]%}"
pr_defaultcolor="${pr_nocolor}%{[48;5;18m%}"

[[ -n "$SSH_CLIENT"  ||  -n "$SSH2_CLIENT" ]] \
  && pr_hostcolor=$(pr_fg 13) \
  || pr_hostcolor=$(pr_fg 12)
[[ $UID -eq 0 ]] && pr_usercolor=$(pr_fg 9) || pr_usercolor=$(pr_fg 10)

pr_gitstatus() { [[ -n $NO_GIT_PROMPT ]] || gitstatus.py }
pr_cwd() {
  pwd | perl -p -e "s|^${HOME}|${pr_defaultcolor}~|;" \
    -e "s|/|$(pr_fg 9)/${pr_defaultcolor}|g;" \
    -e "s|([^/%{}\n]*)\$|$(pr_fg 10)\1${pr_defaultcolor}|"
}
PROMPT='${pr_defaultcolor}${pr_usercolor}%n${pr_hostcolor}@%M${pr_defaultcolor}:$(pr_cwd)$(pr_gitstatus)%E
${pr_nocolor}${pr_bold}$(pr_fg 15)>>> ${pr_nocolor}'

if [[ $TERM != linux && $TERM != fbterm ]]; then
  precmd() {
    echo -ne '\a' # BELL
    print -Pn '\e]0;%n@%M:%~ - zsh\a' # Window title
  }

  preexec() {
    print -Pn '\e]0;%n@%M:%~ - $1\a' # Window title
  }
fi

los_root="$HOME/source/lineageos"
function chpwd() {
  if [ "${PWD#$los_root}" != "$PWD" ]
  then
    export PATH="$los_root/py2:$PATH"
    typeset -U path
  fi
}

# ls colors
eval $(dircolors ~/dotfiles/zsh/dircolors)
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

source ~/dotfiles/zsh/zsh-autosuggestions/zsh-autosuggestions.zsh

source ~/dotfiles/zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)

source ~/dotfiles/zsh/zsh-history-substring-search/zsh-history-substring-search.zsh
HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND='bg=green,fg=black,bold'
HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_NOT_FOUND='bg=red,fg=white,bold'
